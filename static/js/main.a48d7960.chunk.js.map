{"version":3,"sources":["serviceWorker.js","Visualizer/machine.js","Visualizer/algorithm.js","Visualizer/constants.js","Visualizer/helpers.js","Visualizer/grid.js","Visualizer/Visualizer.js","Visualizer/rtree.js","index.js"],"names":["Boolean","window","location","hostname","match","Machine","id","initial","context","activeSelection","selectedAlgorithm","states","idle","on","DRAW","START","SELECT_ALGORITHM","actions","drawing","target","cond","SELECT","assign","ctx","DROP","isSingular","IDLE","pathfinding","RESET","send","guards","_event","canStart","heuristic","nodeA","finishNode","Math","abs","coords","x","y","dijkstra","grid","startNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","row","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","weight","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","position","col","filter","GRID_SIZE","FINDER_COLOR","FINDER_FAIL_COLOR","PATH_COLOR","algorithms","drawRect","opts","two","color","size","rect","makeRectangle","fill","noFill","opacity","linewidth","randomNumber","floor","random","GridNode","f","g","h","empty","_reset","this","globalDistance","withGraphic","mesh","pathfinderRect","noStroke","anim","width","height","unbind","failAnim","Object","bind","panic","makeWall","reset","translation","rtree","getDimensions","ref","clientWidth","clientHeight","randomizeStartingUnits","mappedGrid","rowl","coll","start","end","placePremadeUnit","getUnit","onWindowResize","reload","unit","targetNode","copy","prevLocation","getRectByVec2","inBounds","searchTree","get","premadeUnits","find","u","type","Visualizer","canvasContainerRef","useRef","useState","isMouseDown","setMouseDown","animSpeed","setAnimSpeed","useMachine","machine","current","getMouseCoords","e","pageX","pageY","mouseMove","matches","premadeUnit","mouseDown","mouseUp","gridUnit","resetUnit","set","visualizeAlgorithm","nodesInShortestPath","hasFailed","i","setTimeout","finderNode","drawPath","drawFailedUnits","useEffect","canvasRef","Two","Types","svg","appendTo","setupTwoJs","GRID_ROWS","GRID_COLUMNS","rows","cols","_grid","r","_col","_row","add","Grid","columns","setupGrid","resizeCanvas","RBush","insert","x1","y1","x2","y2","minX","minY","maxX","maxY","search","RTree","halfGrid","offsetY","getBoundingClientRect","drawGrid","play","forEach","shape","makeCircle","drawPoint","addEventListener","removeEventListener","className","aria-haspopup","aria-controls","aria-hidden","role","map","a","key","onClick","href","n","selectUnitAndBeginDrawing","disabled","openNodes","closedNodes","emergency","neighbours","neighbour","some","aStar","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchStart","onTouchEnd","onMouseLeave","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mDCfSC,cACX,CACIC,GAAI,UACJC,QAAS,OACTC,QAAS,CACLC,gBAAiB,KACjBC,kBAAmB,MAEvBC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,KAAM,UACNC,MAAO,cACPC,iBAAkB,CACdC,QAAS,uBAIrBC,QAAS,CACLL,GAAI,CACAE,MAAO,CACHI,OAAQ,cACRC,KAAM,YAEVJ,iBAAkB,CACdC,QAAS,CAAC,oBAAqB,SAEnCI,OAAQ,CACJJ,QAASK,YAAO,CACZb,gBAAiB,SAACc,EAAD,GAA+B,IAAvBd,EAAsB,EAAtBA,gBAErB,OADec,EAAId,kBAAoBA,EACvB,KAAOA,MAInCe,KAAM,CACFP,QAAS,CACLK,YAAO,CACHb,gBAAiB,SAACc,GAAD,aAAS,UAAAA,EAAId,uBAAJ,eAAqBgB,YAAa,KAAOF,EAAId,mBAE3E,QACJW,KAAM,cAEVM,KAAM,CACFP,OAAQ,gBACRF,QAASK,YAAO,CACZb,gBAAiB,kBAAM,WAKvCkB,YAAa,CACTd,GAAI,CAAEe,MAAO,WAIzB,CACIX,QAAS,CACLP,kBAAmBY,YAAO,CACtBZ,kBAAmB,SAACa,EAAD,GACf,OAD+C,EAAxBb,mBACKa,EAAIb,qBAGxCE,KAAMiB,YAAK,SAEfC,OAAQ,CACJL,WAAY,SAACF,EAAKQ,GAAN,OAAiBR,EAAId,iBAAmBc,EAAId,gBAAgBgB,YACxEO,SAAU,SAACT,EAAKQ,GAAN,OAAiBR,EAAId,iBAAmBc,EAAIb,sBCpBlE,SAASuB,EAAUC,EAAOC,GACxB,OAAOC,KAAKC,IAAIH,EAAMI,OAAOC,EAAIJ,EAAWG,OAAOC,GAAKH,KAAKC,IAAIH,EAAMI,OAAOE,EAAIL,EAAWG,OAAOE,GAS/F,SAASC,EAASC,EAAMC,EAAWR,GACxC,IAAMS,EAAsB,GAC5BD,EAAUE,SAAW,EAErB,IADA,IAAMC,EA0CR,SAAqBJ,GACnB,IAAMK,EAAQ,GADW,uBAEzB,YAAkBL,EAAlB,+CAAwB,CAAC,IAAdM,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAdC,EAAa,QACtBF,EAAMG,KAAKD,IAFS,oFAFC,kFAOzB,OAAOF,EAjDgBI,CAAYT,GAC1BI,EAAeM,QAAQ,CAC9BC,EAAoBP,GACpB,IAAMQ,EAAcR,EAAeS,QAEnC,KAAID,EAAYE,OAAS,GAAzB,CAGA,GAAIF,EAAYT,WAAaY,IAAU,OAAOb,EAG9C,GAFAU,EAAYI,WAAY,EACxBd,EAAoBM,KAAKI,GACrBA,EAAYhD,KAAO6B,EAAW7B,GAAI,OAAOsC,EAC7Ce,EAAyBL,EAAaZ,KAI1C,SAASW,EAAoBP,GAC3BA,EAAec,MAAK,SAAC1B,EAAO2B,GAAR,OAAkB3B,EAAMW,SAAWgB,EAAMhB,YAO/D,SAASc,EAAyBV,EAAMP,GACtC,IAAMoB,EAAqBC,EAAsBd,EAAMP,GADX,uBAE5C,YAAuBoB,EAAvB,+CAA2C,CAAC,IAAjCE,EAAgC,QACzCA,EAASnB,SAAWI,EAAKJ,SAAW,EACpCmB,EAASC,aAAehB,GAJkB,mFAQ9C,SAASc,EAAsBd,EAAMP,GACnC,IAAMwB,EAAY,GADuB,EAEpBjB,EAAKkB,SAAlBC,EAFiC,EAEjCA,IAAKpB,EAF4B,EAE5BA,IAKb,OAJIA,EAAM,GAAGkB,EAAUhB,KAAKR,EAAKM,EAAM,GAAGoB,IACtCpB,EAAMN,EAAKU,OAAS,GAAGc,EAAUhB,KAAKR,EAAKM,EAAM,GAAGoB,IACpDA,EAAM,GAAGF,EAAUhB,KAAKR,EAAKM,GAAKoB,EAAM,IACxCA,EAAM1B,EAAK,GAAGU,OAAS,GAAGc,EAAUhB,KAAKR,EAAKM,GAAKoB,EAAM,IACtDF,EAAUG,QAAO,SAAAL,GAAQ,OAAKA,EAASN,aCtGzC,IAAMY,EAAY,GAGZC,EAAe,UACfC,EAAoB,UACpBC,EAAa,UACbC,EAAa,CAAC,WAAY,eCJhC,SAASC,IAA0B,IAAjBC,EAAgB,uDAAT,GAAIC,EAAK,yCACaD,EAA1CrC,SAD6B,MACzB,EADyB,IACaqC,EAAnCpC,SADsB,MAClB,EADkB,EACfsC,EAA4BF,EAA5BE,MADe,EACaF,EAArBG,YADQ,MACDT,EADC,EAE/BU,EAAOH,EAAII,cAAc1C,EAAGC,EAAGuC,EAAMA,GAU3C,OARID,EACAE,EAAKE,KAAOJ,EAEZE,EAAKG,SAETH,EAAKI,QAAU,EACfJ,EAAKK,UAAY,IAEVL,EAcJ,IAAMM,EAAe,SAACP,GAAD,OAAU3C,KAAKmD,MAAMnD,KAAKoD,SAAWT,ICK1D,SAASU,EAASrB,EAAKpB,GAC1B,MAAO,CACHH,SAAUY,IAEViC,EAAGjC,IACHkC,EAAGlC,IACHmC,EAAGnC,IACHQ,aAAc,KACdP,WAAW,EACXF,OAAQ,EACRqC,OAAO,EACPC,OAVG,WAWCC,KAAKlD,SAAWY,IAChBsC,KAAKC,eAAiBvC,IACtBsC,KAAK9B,aAAe,KACpB8B,KAAKrC,WAAY,EACjBqC,KAAKvC,OAAS,EACduC,KAAKF,OAAQ,GAEjB,SAAW,MAAM,GAAN,OAAUzB,GAAV,OAAgBpB,IAC3B,eAAiB,MAAO,CAAEoB,MAAKpB,SAKhC,SAASiD,EAAYhD,EAAM4B,GAAM,IAAD,EACd5B,EAAKkB,SAAlBnB,EAD2B,EAC3BA,IACFT,EAF6B,EACtB6B,IACGE,EAAaA,EAAY,EACnC9B,EAAIQ,EAAMsB,EAAaA,EAAY,EAEnC4B,EAAOvB,EAAS,CAAEpC,IAAGC,KAAKqC,GAG1BsB,EAAiBxB,EAAS,CAAEpC,IAAGC,IAAGsC,MAAOP,EAAcQ,KAAM,GAAKF,GACxEsB,EAAef,QAAU,EACzBe,EAAeC,WAEf,IAAMC,EAAO,WACTF,EAAef,SAAW,EAAId,EAC9B6B,EAAeG,QACfH,EAAeI,SAEXJ,EAAeG,OAAShC,GACxBO,EAAI2B,OAAO,SAAUH,IAIvBI,EAAW,SAAXA,IACFN,EAAef,SAAW,IACtBe,EAAef,SAAW,GAC1BP,EAAI2B,OAAO,SAAUC,IAG7B,OAAOC,OAAOpF,OAAO2B,EAAM,CACvBoD,KADuB,WAEnBxB,EAAI8B,KAAK,SAAUN,IAEvBO,MAJuB,WAKnBT,EAAejB,KAAOV,EACtB2B,EAAef,QAAU,EACzBP,EAAI8B,KAAK,SAAUF,IAEvBI,SATuB,WAUnBV,EAAef,QAAU,EACzBe,EAAejB,KAAO,QACtBiB,EAAeG,MAAQhC,EACvB6B,EAAeI,OAASjC,EACxByB,KAAKvC,OAAS,EACduC,KAAKF,OAAQ,GAEjBiB,MAjBuB,WAkBnBf,KAAKD,SACLK,EAAejB,KAAOX,EACtB4B,EAAef,QAAU,EACzBe,EAAeG,MAAQ,EACvBH,EAAeI,OAAS,GAE5B,aAAe,MAAO,CAAEhE,IAAGC,MAC3B,kBACI,OAAO0D,EAAKa,aAEhB,iBAAmB,OAAOZ,K,ICjG9BtB,EAAKmC,EAAOtE,E,yBAQhB,SAASuE,EAAcC,GAGnB,MAAO,CAAEZ,MAFKY,EAAIC,YAEFZ,OADDW,EAAIE,cAuCvB,SAASC,IASL,IAT+B,IACjBC,EAAe5E,EAArBA,KAEF6E,EAAOD,EAAWlE,OAAS,EAC3BoE,EAAOF,EAAW,GAAGlE,OAAS,EAChCqE,EAAQH,EAAWhC,EAAaiC,IAAOjC,EAAakC,IACpDE,EAAMJ,EAAWhC,EAAaiC,IAAOjC,EAAakC,IAG/CC,IAAUC,GACbD,EAAQH,EAAWhC,EAAaiC,IAAOjC,EAAakC,IAGxDG,EAAiBC,EAAQ,iBAAkBH,GAC3CE,EAAiBC,EAAQ,YAAaF,GAE1C,SAASG,IAGL5H,OAAOC,SAAS4H,SAEpB,SAASH,EAAiBI,EAAMC,GAC5BD,EAAK7B,KAAKd,QAAU,EACpB2C,EAAK7B,KAAKa,YAAYkB,KAAKD,EAAWjB,aACtCgB,EAAKG,aAAeH,EAAK7H,SACzB6H,EAAK7H,SAAW8H,EAAW7D,SAC3B6D,EAAWnC,OAAQ,EAEvB,SAASsC,EAAc5F,EAAGC,GACtB,IAAM4F,EAAWpB,EAAMqB,WAAW9F,EAAGC,GAErC,OAAM4F,EAAShF,OACUV,EAAK4F,IAAIF,EAAS,GAAGjE,UAIvC,KAEX,IAAMyD,EAAU,SAACtH,GAAD,OAAQiI,EAAaC,MAAK,SAAAC,GAAC,OAAIA,EAAEnI,KAAOA,MAGlDiI,EAAe,CAAC,CAClBjI,GAAI,gBACJwE,MH5G4B,UG6G5B4D,KAAM,SACNjH,YAAY,EACZvB,SAAU,KACVgI,aAAc,KACdhC,KAAM,MACP,CACC5F,GAAI,WACJwE,MHnH0B,UGoH1B4D,KAAM,SACNjH,YAAY,EACZvB,SAAU,KACVgI,aAAc,KACdhC,KAAM,MACP,CACC5F,GAAI,OACJwE,MAAO,UACP4D,KAAM,OACNjH,YAAY,EACZvB,SAAU,KACVgI,aAAc,KACdhC,KAAM,OAmUKyC,EA9TI,WACf,IAAMC,EAAqBC,iBAAO,MADb,EAEeC,oBAAS,GAFxB,mBAEdC,EAFc,KAEDC,EAFC,OAGaF,mBAAS,KAHtB,mBAGdG,EAHc,KAGHC,EAHG,OAIGC,qBAAWC,GAJd,mBAIdC,EAJc,KAILxH,EAJK,KAOfyH,EAAiB,SAACC,GACpB,GAAKvC,EAGL,MAAO,CAAEzE,EAFCgH,EAAEC,MAEAhH,EADF+G,EAAEE,QAIVC,EAAY,SAACH,GACf,GAAKF,EAAQM,QAAQ,WAArB,CADqB,MAIJL,EAAeC,GAC1BtG,EAAOkF,EALQ,EAIb5F,EAJa,EAIVC,GAGX,GAAIS,EAAM,CAAC,IAAD,EACA2G,EAAchC,EAAO,UAACyB,EAAQ7I,QAAQC,uBAAjB,aAAC,EAAiCH,IAEzDsJ,IACAA,EAAY1D,KAAKd,QAAU,GAC3BwE,EAAY1D,KAAKa,YAAYkB,KAAKhF,EAAK8D,cAGvCgC,GAEAc,EAAUN,MAKhBO,EAAU,WAEZd,GAAa,IAGXa,EAAY,SAACN,GACf,GAAKF,EAAQM,QAAQ,WAArB,CADqB,MAIJL,EAAeC,GAE1BtG,EAAOkF,EANQ,EAIb5F,EAJa,EAIVC,GAIX,GAAKS,EAAL,CAGA,IAAM2G,EAAchC,EAAQyB,EAAQ7I,QAAQC,gBAAgBH,IACtDyJ,EAAWrH,EAAK4F,IAAIrF,EAAKkB,UAE1ByF,EAAYnI,YAQbkG,EAAiBiC,EAAaG,GAC9BA,EAASlE,OAAQ,IAPjBkE,EAASlD,WAETmD,EAAUX,EAAQ7I,QAAQC,gBAAgBH,KAQ9CuB,EAAK,QAGLmH,GAAa,MAmBjB,SAASgB,EAAU1J,GACf,GAAKA,GAAO+I,EAAQM,QAAQ,WAA5B,CADmB,IAIXzD,EAAS0B,EAAQtH,GAAjB4F,KACRA,EAAKa,YAAYkD,KAAK,KAAM,KAC5B/D,EAAKhG,SAAW,MAsBpB,SAASgK,EAAmBtH,EAAqBuH,GAG7C,IAFA,IAAMC,EAAYD,EAAoB/G,QAAU,EADkB,WAGzDiH,GACL,IAAMpH,EAAOL,EAAoByH,GAG7BA,IAAMzH,EAAoBQ,OAE1BkH,YAAW,YA1BvB,SAAkBH,GACd,IADoC,IAAD,WAC1BE,GACL,GAAIA,IAAMF,EAAoB/G,OAE1B,OADAvB,EAAK,SACC,CAAN,UAEJ,IAAMoB,EAAOkH,EAAoBE,GACjCC,YAAW,WACPrH,EAAKsH,WAAWrF,KAAOT,IACxB,GAAK4F,IARHA,EAAI,EAAGA,GAAKF,EAAoB/G,OAAQiH,IAAK,CAAC,IAAD,IAA7CA,GAA6C,mCA2B1CG,CAASL,GAELC,GAlBpB,SAAyBrH,GACrB,IAAK,IAAIsH,EAAI,EAAGA,EAAItH,EAAMK,OAAQiH,IAC9BtH,EAAMsH,GAAGzD,QAkBG6D,CAAgB7H,KAIrBqG,EAAYoB,GAIfC,YAAW,WACGrH,EAAKoD,SAChB4C,EAAYoB,IAtBdA,EAAI,EAAGA,GAAKzH,EAAoBQ,OAAQiH,IAAM,EAA9CA,GA4Fb,OA1BAK,qBAAU,WACN,IAAMxD,EAAM0B,EAAmBS,SAhTvC,SAAoBsB,GAChB,GAAI9F,EACA,OAAOA,GAEXA,EAAM,IAAI+F,IAAI,CAAElC,KAAMkC,IAAIC,MAAMC,OAC5BC,SAASJ,GA4STK,CAAW9D,GAFC,MA7RpB,SAAmBA,GAAM,IAAD,EACMD,EAAcC,GAAhCZ,EADY,EACZA,MACF2E,EAFc,EACL1E,OACYjC,EACrB4G,EAAe5E,EAAQhC,EAG7B,OADA5B,EDtCG,SAAcyI,EAAMC,GAEvB,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAIH,EAAMG,IACtBD,EAAMnI,KAAK,IAKf,MAAO,CACH,aACI,OAJU,GAMd,WACI,OAAOmI,GAEX/C,IAPG,SAOCiD,EAAMC,GACN,IAAIpH,EAAMmH,EAAMvI,EAAMwI,EAKtB,MAJoB,kBAATD,IACPnH,EAAMmH,EAAKnH,IACXpB,EAAMuI,EAAKvI,KAERqI,EAAMrI,GAAKoB,IAEtBqH,IAfG,SAeCrH,EAAKpB,EAAKC,GAEVoI,EAAMrI,GAAKoB,GAAOnB,ICanByI,CAAKT,EAAWC,GAChB,CAAEC,KAAMF,EAAWU,QAAST,GA0RLU,CAAU1E,GAA5ByE,EAHI,EAGJA,QAASR,EAHL,EAGKA,KAkBjB,OAxTR,SAAsBjE,GAAM,IAAD,EACGD,EAAcC,GAAhCZ,EADe,EACfA,MAAOC,EADQ,EACRA,OAEf1B,EAAIyB,MAAQA,EACZzB,EAAI0B,OAASA,EAmSTsF,CAAa3E,GAEbF,ECrUD,WACH,IAAMA,EAAQ,IAAI8E,IAElB,MAAO,CACHC,OADG,SACIC,EAAIC,EAAIC,EAAIC,EAAIvH,GACnBoC,EAAM+E,OAAN,aACIK,KAAMJ,EACNK,KAAMJ,EACNK,KAAMJ,EACNK,KAAMJ,GACHvH,KAGXyD,WAVG,SAUQ9F,EAAGC,GASV,OARiBwE,EAAMwF,OACnB,CACIJ,KAAM7J,EAAI,EACV8J,KAAM7J,EAAI,EACV8J,KAAM/J,EAAI,EACVgK,KAAM/J,EAAI,MDkTdiK,GA3RhB,SAAkBd,EAASR,EAAMjE,GAI7B,IAHA,IAAMwF,EAAWpI,EAAY,EAClBqI,EAAYzF,EAAI0F,wBAAnBpK,EAECQ,EAAM,EAAGA,EAAMmI,EAAMnI,IAC1B,IAAK,IAAIoB,EAAM,EAAGA,EAAMuH,EAASvH,IAAO,CACpC,IAAM7B,EAAImK,EAAYtI,EAAME,EACtB9B,EAAImK,EAAUD,EAAY1J,EAAMsB,EAChC0H,EAAKzJ,EAAImK,EACTT,EAAKzJ,EAAIkK,EACTR,EAAK3J,EAAImK,EACTP,EAAK3J,EAAIkK,EACT9H,EAAO,CACTT,SAAU,CAAEC,MAAKpB,QAErBgE,EAAM+E,OAAOC,EAAIC,EAAIC,EAAIC,EAAIvH,GAE7B,IAAM3B,EAAOgD,EAAYR,EAASrB,EAAKpB,GAAsB6B,GAC7DnC,EAAK+I,IAAIrH,EAAKpB,EAAKC,IA2QvB4J,CAASlB,EAASR,EAAMjE,GAExBrC,EAAIiI,OAEJvE,EAAawE,SAAQ,SAAChF,EAAMsC,GACxB,IAAMzF,EAAO,CAAErC,GAAI,IAAKC,GAAI,IAAKsC,MAAOiD,EAAKjD,OAC7CyD,EAAa8B,GAAGnE,KAAqB,SAAd6B,EAAKW,KAAkB/D,EAASC,EAAMC,GF9TlE,SAAmBD,EAAMC,GAAM,IAAD,EACqBD,EAA9CrC,SADyB,MACrB,EADqB,IACqBqC,EAAvCpC,SADkB,MACd,EADc,EACXsC,EAAgCF,EAAhCE,MADW,EACqBF,EAAzBG,YADI,MACGT,EAAY,EADf,EAE3B0I,EAAQnI,EAAIoI,WAAW1K,EAAGC,EAAGuC,GAMnC,OAJAiI,EAAM9H,KAAOJ,EACbkI,EAAM5H,QAAU,EAChB4H,EAAM3H,UAAY,IAEX2H,EEsTqEE,CAAUtI,EAAMC,MAGxFwC,IAEApH,OAAOkN,iBAAiB,SAAUtF,GAE3B,WACH5H,OAAOmN,oBAAoB,SAAUvF,MAE1C,IAGC,oCACI,yBAAKvH,GAAG,UAAU+M,UAAU,6DACxB,yBAAKA,UAAU,0CACX,yBAAKA,UAAU,kDACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,oBACX,4BAAQA,UAAU,SAASC,gBAAc,OAAOC,gBAAc,kBAC1D,8BAAOlE,EAAQ7I,QAAQE,kBAAoB2I,EAAQ7I,QAAQE,kBAAoB,qBAC/E,0BAAM2M,UAAU,iBACZ,uBAAGA,UAAU,oBAAoBG,cAAY,YAIzD,yBAAKH,UAAU,gBAAgB/M,GAAG,iBAAiBmN,KAAK,QACpD,yBAAKJ,UAAU,oBAEP3I,EAAWgJ,KAAI,SAAAC,GAAC,OAEZ,uBAAGC,IAAKD,EAAGE,QAAS,WAjJxDhM,EAAK,mBAAoB,CAAEnB,kBAiJmDiN,KAAIG,KAAK,IAAIT,UAAU,iBAC5DM,SAQzB,yBAAKN,UAAU,yBACX,yBAAKA,UAAU,oBACX,4BAAQA,UAAU,SAASC,gBAAc,OAAOC,gBAAc,kBAC1D,8BAAqB,MAAdtE,EAAoB,OAAS,QACpC,0BAAMoE,UAAU,iBACZ,uBAAGA,UAAU,oBAAoBG,cAAY,YAIzD,yBAAKH,UAAU,gBAAgB/M,GAAG,iBAAiBmN,KAAK,QACpD,yBAAKJ,UAAU,oBAEX,uBAAGQ,QAAS,kBAAM3E,EAAa,MAAMmE,UAAU,iBAA/C,QAIA,uBAAGQ,QAAS,kBAAM3E,EAAa,KAAKmE,UAAU,iBAA9C,YAOhB,yBAAKA,UAAU,kDAGP9E,EAAamF,KAAI,SAAAK,GAAC,aACd,4BACIH,IAAKG,EAAEzN,GAAK8B,KAAKoD,SACjBqI,QAAS,kBApMzC,SAAmCpN,GAE/B,GAAI4I,EAAQM,QAAQ,WAGhB,OAFAlJ,EAAgByH,aAAezH,EAAgBP,cAC/C2B,EAAK,QAGTA,EAAK,QACLmI,EAAUvJ,EAAgBH,IAC1BuB,EAAK,SAAU,CAAEpB,oBA2L0BuN,CAA0BD,IACzCV,UAAS,8BAAwB,UAAAhE,EAAQ7I,QAAQC,uBAAhB,eAAiCH,MAAOyN,EAAEzN,GAAK,YAAc,IAC9F2N,SAAU5E,EAAQM,QAAQ,gBACzBoE,EAAEzN,QAMnB,yBAAK+M,UAAU,kDAEX,4BACIQ,QAAS,WAxGhBnL,EAAKA,KACbqK,SAAQ,SAAA3I,GACTA,EAAI2I,SAAQ,SAAA9J,GACJb,KAAKoD,SAAW,IAAOvC,EAAK4C,OAC5B5C,EAAK4D,kBAqGGwG,UAAS,qBACTY,SAAU5E,EAAQM,QAAQ,gBAH9B,mBAOA,4BACIkE,QA1IxB,WACIhM,EAAK,SAEL,IAAMc,EAAYD,EAAK4F,IAAIC,EAAa,GAAGrI,UACrCiC,EAAaO,EAAK4F,IAAIC,EAAa,GAAGrI,UAExC0C,EAAsB,GACtByG,EAAQ7I,QAAQE,oBAAsBgE,EAAW,GACjD9B,EAAsBH,EAASC,EAAKA,KAAMC,EAAWR,GAC9CkH,EAAQ7I,QAAQE,oBAAsBgE,EAAW,KACxD9B,EJpSL,SAAeF,EAAMC,EAAWR,GACrCQ,EAAUgD,EAAI,EACdhD,EAAUiD,EAAI3D,EAAUU,EAAWR,GACnCQ,EAAU+C,EAAI/C,EAAUiD,EAOxB,IALA,IAAMhD,EAAsB,GACxBsL,EAAY,CAACvL,GACXwL,EAAc,GAEhBC,EAAY,EACPF,EAAU9K,QAAQ,CAEzB,KADAgL,GACiB,IACf,OAAOxL,EAET,IAAMyG,EAAU6E,EAAU3K,QAI1B,GAHA4K,EAAYjL,KAAKmG,GACjBzG,EAAoBM,KAAKmG,GAErBA,EAAQ/I,KAAO6B,EAAW7B,GAC5B,OAAOsC,EAET,IAAMyL,EAAatK,EAAsBsF,EAAS3G,GAZzB,uBAczB,IAdyB,IAczB,EAdyB,iBAcd4L,EAdc,QAevB,GAAIA,EAAU9K,OAAS,GAAK2K,EAAYI,MAAK,SAAAR,GAAC,OAAIA,EAAEzN,KAAOgO,EAAUhO,MACnE,iBAIFgO,EAAU3I,EAAI0D,EAAQ1D,EAAI,EAE1B,IAAMC,EAAI3D,EAAUqM,EAAWnM,GAC/BmM,EAAU1I,EAAIA,EACd0I,EAAU5I,EAAI4I,EAAU3I,EAAIC,EAC5B0I,EAAUrK,aAAeoF,EAEpB6E,EAAUK,MAAK,SAAAR,GAAC,OAAIA,EAAEzN,KAAOgO,EAAUhO,OAC1C4N,EAAUhL,KAAKoL,IAdnB,EAAwBD,EAAxB,+CAAoC,IAdX,kFA+BZH,EAwCAtK,MAAK,SAAC1B,EAAO2B,GAAR,OAAkB3B,EAAMwD,EAAI7B,EAAM6B,KArCtD,OAAO9C,EIwPyB4L,CAAM9L,EAAKA,KAAMC,EAAWR,IAGtD+H,EAAmBtH,EJrLpB,SAAqCT,GAG1C,IAFA,IAAMsM,EAA2B,GAC7BC,EAAcvM,EACK,OAAhBuM,GACLD,EAAyBE,QAAQD,GACjCA,EAAcA,EAAYzK,aAE5B,OAAOwK,EI6K2BG,CAA4BzM,KA+HpCkL,UAAS,4BAAuBhE,EAAQM,QAAQ,gBAAkB,cAClEsE,SAAU5E,EAAQM,QAAQ,gBAH9B,SAOA,4BACIkE,QA/HxB,WACiBnL,EAAKA,KACbqK,SAAQ,SAAA3I,GACTA,EAAI2I,SAAQ,SAAA9J,GAAI,OAAIA,EAAK6D,cAE7BO,IACAxF,EAAK,UA0HewL,UAAS,iBACTY,SAAU5E,EAAQM,QAAQ,gBAH9B,YAUZ,yBAAKrJ,GAAG,SACJ4G,IAAK0B,EACLiG,YAAanF,EACboF,YAAajF,EACbkF,UAAWjF,EACXkF,YAAatF,EACbuF,aAAcpF,EACdqF,WAAYpF,EACZqF,aAAc,wBAAMnF,EAAS,UAACX,EAAQ7I,QAAQC,uBAAjB,aAAC,EAAiCH,SEzb/E8O,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SR6HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a48d7960.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nimport { Machine, assign, send } from 'xstate';\r\n\r\nexport default Machine(\r\n    {\r\n        id: 'machine',\r\n        initial: 'idle',\r\n        context: {\r\n            activeSelection: null,\r\n            selectedAlgorithm: null\r\n        },\r\n        states: {\r\n            idle: {\r\n                on: {\r\n                    DRAW: 'drawing',\r\n                    START: 'pathfinding',\r\n                    SELECT_ALGORITHM: {\r\n                        actions: 'selectedAlgorithm'\r\n                    }\r\n                }\r\n            },\r\n            drawing: {\r\n                on: {\r\n                    START: {\r\n                        target: 'pathfinding',\r\n                        cond: 'canStart'\r\n                    },\r\n                    SELECT_ALGORITHM: {\r\n                        actions: ['selectedAlgorithm', 'idle']\r\n                    },\r\n                    SELECT: {\r\n                        actions: assign({\r\n                            activeSelection: (ctx, { activeSelection }) => {\r\n                                const isSame = ctx.activeSelection === activeSelection;\r\n                                return isSame ? null : activeSelection;\r\n                            }\r\n                        })\r\n                    },\r\n                    DROP: {\r\n                        actions: [\r\n                            assign({\r\n                                activeSelection: (ctx) => ctx.activeSelection?.isSingular ? null : ctx.activeSelection\r\n                            }),\r\n                            'idle'],\r\n                        cond: 'isSingular'\r\n                    },\r\n                    IDLE: {\r\n                        target: '#machine.idle',\r\n                        actions: assign({\r\n                            activeSelection: () => null\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n            pathfinding: {\r\n                on: { RESET: 'idle' }\r\n            }\r\n        }\r\n    },\r\n    {\r\n        actions: {\r\n            selectedAlgorithm: assign({\r\n                selectedAlgorithm: (ctx, { selectedAlgorithm }) => {\r\n                    return selectedAlgorithm || ctx.selectedAlgorithm;\r\n                }\r\n            }),\r\n            idle: send('IDLE')\r\n        },\r\n        guards: {\r\n            isSingular: (ctx, _event) => ctx.activeSelection && ctx.activeSelection.isSingular,\r\n            canStart: (ctx, _event) => ctx.activeSelection && ctx.selectedAlgorithm\r\n        }\r\n    }\r\n);","// My take on the astar algo.\r\n// It may be slightly inaccurate in terms of implementation\r\n// but it works for the most part\r\nexport function aStar(grid, startNode, finishNode) {\r\n  startNode.g = 0;\r\n  startNode.h = heuristic(startNode, finishNode);\r\n  startNode.f = startNode.h;\r\n  \r\n  const visitedNodesInOrder = [];\r\n  let openNodes = [startNode];\r\n  const closedNodes = [];\r\n\r\n  let emergency = 0;\r\n  while (!!openNodes.length) {\r\n    emergency++;\r\n    if (emergency >= 5000)\r\n      return visitedNodesInOrder;\r\n    // debugger;\r\n    const current = openNodes.shift();\r\n    closedNodes.push(current);\r\n    visitedNodesInOrder.push(current);\r\n\r\n    if (current.id === finishNode.id)\r\n      return visitedNodesInOrder;\r\n\r\n    const neighbours = getUnvisitedNeighbors(current, grid);\r\n\r\n    for (const neighbour of neighbours) {\r\n      if (neighbour.weight > 0 || closedNodes.some(n => n.id === neighbour.id))\r\n        continue;\r\n\r\n        // G is distance from start to this node\r\n        // so always +1\r\n      neighbour.g = current.g + 1;\r\n\r\n      const h = heuristic(neighbour, finishNode);\r\n      neighbour.h = h;\r\n      neighbour.f = neighbour.g + h;\r\n      neighbour.previousNode = current;\r\n\r\n      if (!openNodes.some(n => n.id === neighbour.id))\r\n        openNodes.push(neighbour);\r\n    }\r\n\r\n    sortNodesByF(openNodes);\r\n  }\r\n\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction heuristic(nodeA, finishNode) {\r\n  return Math.abs(nodeA.coords.x - finishNode.coords.x) + Math.abs(nodeA.coords.y - finishNode.coords.y);\r\n}\r\n\r\n// Source https://github.com/clementmihailescu/Pathfinding-Visualizer-Tutorial/blob/master/src/algorithms/dijkstra.js\r\n\r\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.weight > 0) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode.id === finishNode.id) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction sortNodesByF(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.f - nodeB.f);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node.position;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export const GRID_SIZE = 25;\r\nexport const START_NODE_COLOR = '#D38994';\r\nexport const END_NODE_COLOR = '#985F6F';\r\nexport const FINDER_COLOR = '#4E4C67';\r\nexport const FINDER_FAIL_COLOR = '#D60A14';\r\nexport const PATH_COLOR = '#DCD6F7';\r\nexport const algorithms = ['Djikstra', 'A* (A Star)'];\r\n","import { GRID_SIZE } from './constants';\r\n\r\nexport function drawRect(opts = {}, two) {\r\n    const { x = 0, y = 0, color, size = GRID_SIZE } = opts;\r\n    const rect = two.makeRectangle(x, y, size, size);\r\n\r\n    if (color)\r\n        rect.fill = color;\r\n    else\r\n        rect.noFill();\r\n\r\n    rect.opacity = 1;\r\n    rect.linewidth = 0.45;\r\n\r\n    return rect;\r\n}\r\n\r\nexport function drawPoint(opts, two) {\r\n    const { x = 0, y = 0, color, size = GRID_SIZE / 2 } = opts;\r\n    const shape = two.makeCircle(x, y, size);\r\n\r\n    shape.fill = color;\r\n    shape.opacity = 1;\r\n    shape.linewidth = 0.45;\r\n\r\n    return shape;\r\n}\r\n\r\nexport const randomNumber = (size) => Math.floor(Math.random() * size);\r\n","import { GRID_SIZE, FINDER_COLOR, FINDER_FAIL_COLOR } from './constants';\r\nimport { drawRect } from './helpers';\r\n\r\nexport function Grid(rows, cols) {\r\n    const _grid = [];\r\n    for (let r = 0; r < rows; r++) {\r\n        _grid.push([]);\r\n    }\r\n\r\n    let _indexCount = 0;\r\n\r\n    return {\r\n        get length() {\r\n            return _indexCount;\r\n        },\r\n        get grid() {\r\n            return _grid;\r\n        },\r\n        get(_col, _row) {\r\n            let col = _col, row = _row;\r\n            if (typeof _col === 'object') {\r\n                col = _col.col;\r\n                row = _col.row;\r\n            }\r\n            return _grid[row][col];\r\n        },\r\n        add(col, row, node) {\r\n\r\n            _grid[row][col] = node;\r\n        },\r\n    }\r\n}\r\n\r\nexport function GridNode(col, row) {\r\n    return {\r\n        distance: Infinity,\r\n        // For AStarAlgo\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity,\r\n        previousNode: null,\r\n        isVisited: false,\r\n        weight: 0,\r\n        empty: true,\r\n        _reset() {\r\n            this.distance = Infinity;\r\n            this.globalDistance = Infinity;\r\n            this.previousNode = null;\r\n            this.isVisited = false;\r\n            this.weight = 0;\r\n            this.empty = true;\r\n        },\r\n        get id() { return `${col}${row}` },\r\n        get position() { return { col, row } },\r\n    }\r\n}\r\n\r\n// Probably doesn't belong in this file but whatever\r\nexport function withGraphic(node, two) {\r\n    const { row, col } = node.position;\r\n    const x = col * GRID_SIZE + (GRID_SIZE / 2);\r\n    const y = row * GRID_SIZE + (GRID_SIZE / 2);\r\n\r\n    const mesh = drawRect({ x, y }, two);\r\n\r\n    // For pathfinding\r\n    const pathfinderRect = drawRect({ x, y, color: FINDER_COLOR, size: 0 }, two);\r\n    pathfinderRect.opacity = 0;\r\n    pathfinderRect.noStroke();\r\n\r\n    const anim = () => {\r\n        pathfinderRect.opacity += 1 / GRID_SIZE;\r\n        pathfinderRect.width++;\r\n        pathfinderRect.height++;\r\n\r\n        if (pathfinderRect.width >= GRID_SIZE) {\r\n            two.unbind('update', anim);\r\n        }\r\n    }\r\n\r\n    const failAnim = () => {\r\n        pathfinderRect.opacity += 0.05;\r\n        if (pathfinderRect.opacity >= 1)\r\n            two.unbind('update', failAnim);\r\n    }\r\n\r\n    return Object.assign(node, {\r\n        anim() {\r\n            two.bind('update', anim);\r\n        },\r\n        panic() {\r\n            pathfinderRect.fill = FINDER_FAIL_COLOR;\r\n            pathfinderRect.opacity = 0;\r\n            two.bind('update', failAnim);\r\n        },\r\n        makeWall() {\r\n            pathfinderRect.opacity = 1;\r\n            pathfinderRect.fill = 'black';\r\n            pathfinderRect.width = GRID_SIZE;\r\n            pathfinderRect.height = GRID_SIZE;\r\n            this.weight = 1;\r\n            this.empty = false;\r\n        },\r\n        reset() {\r\n            this._reset();\r\n            pathfinderRect.fill = FINDER_COLOR;\r\n            pathfinderRect.opacity = 0;\r\n            pathfinderRect.width = 0;\r\n            pathfinderRect.height = 0;\r\n        },\r\n        get coords() { return { x, y } },\r\n        get translation() {\r\n            return mesh.translation;\r\n        },\r\n        get finderNode() { return pathfinderRect; }\r\n    });\r\n}\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport './Visualizer.scss';\r\nimport Two from 'two.js';\r\nimport { useMachine } from '@xstate/react';\r\n\r\nimport machine from './machine';\r\nimport { dijkstra, getNodesInShortestPathOrder, aStar } from './algorithm';\r\nimport { START_NODE_COLOR, END_NODE_COLOR, GRID_SIZE, PATH_COLOR, algorithms } from './constants';\r\nimport { Grid, GridNode, withGraphic } from './grid';\r\nimport {\r\n    drawRect,\r\n    drawPoint,\r\n    randomNumber\r\n} from './helpers';\r\nimport { RTree } from './rtree';\r\n\r\n// Stuff that don't belong inside the component\r\nlet two, rtree, grid;\r\nfunction setupTwoJs(canvasRef) {\r\n    if (two)\r\n        return two;\r\n\r\n    two = new Two({ type: Two.Types.svg });\r\n    two.appendTo(canvasRef);\r\n}\r\nfunction getDimensions(ref) {\r\n    const width = ref.clientWidth;\r\n    const height = ref.clientHeight;\r\n    return { width, height };\r\n}\r\nfunction resizeCanvas(ref) {\r\n    const { width, height } = getDimensions(ref);\r\n\r\n    two.width = width;\r\n    two.height = height;\r\n}\r\nfunction setupGrid(ref) {\r\n    const { width, height } = getDimensions(ref);\r\n    const GRID_ROWS = height / GRID_SIZE;\r\n    const GRID_COLUMNS = width / GRID_SIZE;\r\n\r\n    grid = Grid(GRID_ROWS, GRID_COLUMNS, GRID_SIZE, two);\r\n    return { rows: GRID_ROWS, columns: GRID_COLUMNS };\r\n}\r\nfunction drawGrid(columns, rows, ref) {\r\n    const halfGrid = GRID_SIZE / 2;\r\n    const { y: offsetY } = ref.getBoundingClientRect();\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n        for (let col = 0; col < columns; col++) {\r\n            const x = halfGrid + (col * GRID_SIZE);\r\n            const y = offsetY + halfGrid + (row * GRID_SIZE);\r\n            const x1 = x - halfGrid;\r\n            const y1 = y - halfGrid;\r\n            const x2 = x + halfGrid;\r\n            const y2 = y + halfGrid;\r\n            const opts = {\r\n                position: { col, row }\r\n            };\r\n            rtree.insert(x1, y1, x2, y2, opts);\r\n\r\n            const node = withGraphic(GridNode(col, row, GRID_SIZE, two), two);\r\n            grid.add(col, row, node);\r\n        }\r\n    }\r\n}\r\nfunction randomizeStartingUnits() {\r\n    const { grid: mappedGrid } = grid;\r\n\r\n    const rowl = mappedGrid.length - 1;\r\n    const coll = mappedGrid[0].length - 1;\r\n    let start = mappedGrid[randomNumber(rowl)][randomNumber(coll)];\r\n    let end = mappedGrid[randomNumber(rowl)][randomNumber(coll)];\r\n\r\n    // Make sure we're not on the same spot\r\n    while (start === end) {\r\n        start = mappedGrid[randomNumber(rowl)][randomNumber(coll)];\r\n    }\r\n\r\n    placePremadeUnit(getUnit('Starting node'), start);\r\n    placePremadeUnit(getUnit('End node'), end);\r\n}\r\nfunction onWindowResize() {\r\n    // For this project, this is fine\r\n    // otherwise we want to actually re-draw the grid and units\r\n    window.location.reload();\r\n}\r\nfunction placePremadeUnit(unit, targetNode) {\r\n    unit.mesh.opacity = 1.0;\r\n    unit.mesh.translation.copy(targetNode.translation);\r\n    unit.prevLocation = unit.location;\r\n    unit.location = targetNode.position;\r\n    targetNode.empty = false;\r\n}\r\nfunction getRectByVec2(x, y) {\r\n    const inBounds = rtree.searchTree(x, y);\r\n\r\n    if (!!inBounds.length) {\r\n        const inBoundsRect = grid.get(inBounds[0].position);\r\n        return inBoundsRect;\r\n    }\r\n\r\n    return null;\r\n}\r\nconst getUnit = (id) => premadeUnits.find(u => u.id === id);\r\n\r\n\r\nconst premadeUnits = [{\r\n    id: 'Starting node',\r\n    color: START_NODE_COLOR,\r\n    type: 'circle',\r\n    isSingular: true,\r\n    location: null,\r\n    prevLocation: null,\r\n    mesh: null\r\n}, {\r\n    id: 'End node',\r\n    color: END_NODE_COLOR,\r\n    type: 'circle',\r\n    isSingular: true,\r\n    location: null,\r\n    prevLocation: null,\r\n    mesh: null\r\n}, {\r\n    id: 'Wall',\r\n    color: '#040000',\r\n    type: 'rect',\r\n    isSingular: false,\r\n    location: null,\r\n    prevLocation: null,\r\n    mesh: null\r\n}];\r\n\r\n\r\n\r\nconst Visualizer = () => {\r\n    const canvasContainerRef = useRef(null);\r\n    const [isMouseDown, setMouseDown] = useState(false);\r\n    const [animSpeed, setAnimSpeed] = useState(7.5);\r\n    const [current, send] = useMachine(machine);\r\n\r\n    // Mouse stuff\r\n    const getMouseCoords = (e) => {\r\n        if (!rtree) return;\r\n        const x = e.pageX;\r\n        const y = e.pageY;\r\n        return { x, y };\r\n    }\r\n\r\n    const mouseMove = (e) => {\r\n        if (!current.matches('drawing'))\r\n            return;\r\n\r\n        const { x, y } = getMouseCoords(e);\r\n        const node = getRectByVec2(x, y);\r\n\r\n        if (node) {\r\n            const premadeUnit = getUnit(current.context.activeSelection?.id);\r\n\r\n            if (premadeUnit) {\r\n                premadeUnit.mesh.opacity = 0.2;\r\n                premadeUnit.mesh.translation.copy(node.translation);\r\n            }\r\n\r\n            if (isMouseDown) {\r\n                // Just call the mousedown function.. it does what we want\r\n                mouseDown(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    const mouseUp = () => {\r\n        // Set mouse down for hold clicks\r\n        setMouseDown(false);\r\n    }\r\n\r\n    const mouseDown = (e) => {\r\n        if (!current.matches('drawing'))\r\n            return;\r\n\r\n        const { x, y } = getMouseCoords(e);\r\n\r\n        const node = getRectByVec2(x, y);\r\n\r\n        if (!node)\r\n            return;\r\n\r\n        const premadeUnit = getUnit(current.context.activeSelection.id);\r\n        const gridUnit = grid.get(node.position);\r\n\r\n        if (!premadeUnit.isSingular) {\r\n\r\n            gridUnit.makeWall();\r\n            // gridUnit.isWall = true;\r\n            resetUnit(current.context.activeSelection.id);\r\n\r\n        } else {\r\n\r\n            placePremadeUnit(premadeUnit, gridUnit);\r\n            gridUnit.empty = false;\r\n        }\r\n\r\n        send('DROP');\r\n\r\n        // Set mouse down for hold clicks\r\n        setMouseDown(true);\r\n    }\r\n\r\n    function selectUnitAndBeginDrawing(activeSelection) {\r\n        // If already in drawing means we're cancelling selection\r\n        if (current.matches(\"drawing\")) {\r\n            activeSelection.prevLocation = activeSelection.location;\r\n            send('IDLE');\r\n            return;\r\n        }\r\n        send('DRAW');\r\n        resetUnit(activeSelection.id);\r\n        send('SELECT', { activeSelection });\r\n    }\r\n\r\n    function selectAlgorithm(selectedAlgorithm) {\r\n        send('SELECT_ALGORITHM', { selectedAlgorithm });\r\n    }\r\n\r\n    function resetUnit(id) {\r\n        if (!id || !current.matches('drawing'))\r\n            return;\r\n\r\n        const { mesh } = getUnit(id);\r\n        mesh.translation.set(-100, -100);\r\n        mesh.location = null;\r\n    }\r\n\r\n    // Algorithm related stuff\r\n    // Drawing\r\n    function drawPath(nodesInShortestPath) {\r\n        for (let i = 0; i <= nodesInShortestPath.length; i++) {\r\n            if (i === nodesInShortestPath.length) {\r\n                send('RESET');\r\n                return;\r\n            }\r\n            const node = nodesInShortestPath[i];\r\n            setTimeout(() => {\r\n                node.finderNode.fill = PATH_COLOR;\r\n            }, 35 * i);\r\n        }\r\n    }\r\n    function drawFailedUnits(nodes) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            nodes[i].panic();\r\n        }\r\n    }\r\n    function visualizeAlgorithm(visitedNodesInOrder, nodesInShortestPath) {\r\n        const hasFailed = nodesInShortestPath.length <= 1;\r\n\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            const node = visitedNodesInOrder[i];\r\n\r\n            // Finished loop\r\n            if (i === visitedNodesInOrder.length) {\r\n\r\n                setTimeout(() => {\r\n\r\n                    drawPath(nodesInShortestPath);\r\n\r\n                    if (hasFailed) {\r\n\r\n                        drawFailedUnits(visitedNodesInOrder);\r\n\r\n                    }\r\n\r\n                }, animSpeed * i);\r\n\r\n            } else {\r\n\r\n                setTimeout(() => {\r\n                    const f = node.anim();\r\n                }, animSpeed * i);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    // Algo\r\n    function startAlgorithm() {\r\n        send('START');\r\n\r\n        const startNode = grid.get(premadeUnits[0].location);\r\n        const finishNode = grid.get(premadeUnits[1].location);\r\n\r\n        let visitedNodesInOrder = [];\r\n        if (current.context.selectedAlgorithm === algorithms[0]) {\r\n            visitedNodesInOrder = dijkstra(grid.grid, startNode, finishNode);\r\n        } else if (current.context.selectedAlgorithm === algorithms[1])\r\n            visitedNodesInOrder = aStar(grid.grid, startNode, finishNode);\r\n\r\n        const nodesInShortestPath = getNodesInShortestPathOrder(finishNode);\r\n        visualizeAlgorithm(visitedNodesInOrder, nodesInShortestPath);\r\n    }\r\n\r\n\r\n    // UI related functions\r\n    function reset() {\r\n        const rows = grid.grid;\r\n        rows.forEach(col => {\r\n            col.forEach(node => node.reset())\r\n        });\r\n        randomizeStartingUnits();\r\n        send('RESET');\r\n    }\r\n    function randomizeWalls() {\r\n        const rows = grid.grid;\r\n        rows.forEach(col => {\r\n            col.forEach(node => {\r\n                if (Math.random() < 0.1 && node.empty)\r\n                    node.makeWall();\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const ref = canvasContainerRef.current;\r\n        setupTwoJs(ref);\r\n        const { columns, rows } = setupGrid(ref);\r\n        resizeCanvas(ref);\r\n\r\n        rtree = RTree();\r\n\r\n        drawGrid(columns, rows, ref);\r\n        // Start rendering\r\n        two.play();\r\n        // Instantiate units\r\n        premadeUnits.forEach((unit, i) => {\r\n            const opts = { x: -100, y: -100, color: unit.color };\r\n            premadeUnits[i].mesh = unit.type === 'rect' ? drawRect(opts, two) : drawPoint(opts, two);\r\n        });\r\n        // Makeit easier for the user by randomizing start and end\r\n        randomizeStartingUnits();\r\n        // Resizer listener\r\n        window.addEventListener('resize', onWindowResize);\r\n\r\n        return function cleanup() {\r\n            window.removeEventListener('resize', onWindowResize);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"actions\" className=\"container is-fluid has-background-light box is-marginless\">\r\n                <div className=\"columns is-desktop container is-fullhd\">\r\n                    <div className=\"column has-text-centered buttons is-marginless\">\r\n                        <div className=\"dropdown is-hoverable\">\r\n                            <div className=\"dropdown-trigger\">\r\n                                <button className=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu4\">\r\n                                    <span>{current.context.selectedAlgorithm ? current.context.selectedAlgorithm : 'Pick an algorithm'}</span>\r\n                                    <span className=\"icon is-small\">\r\n                                        <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                    </span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"dropdown-menu\" id=\"dropdown-menu4\" role=\"menu\">\r\n                                <div className=\"dropdown-content\">\r\n                                    {\r\n                                        algorithms.map(a =>\r\n                                            // eslint-disable-next-line\r\n                                            <a key={a} onClick={() => selectAlgorithm(a)} href=\"#\" className=\"dropdown-item\">\r\n                                                {a}\r\n                                            </a>\r\n\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"dropdown is-hoverable\">\r\n                            <div className=\"dropdown-trigger\">\r\n                                <button className=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu4\">\r\n                                    <span>{animSpeed === 7.5 ? 'Fast' : 'Slow'}</span>\r\n                                    <span className=\"icon is-small\">\r\n                                        <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                    </span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"dropdown-menu\" id=\"dropdown-menu5\" role=\"menu\">\r\n                                <div className=\"dropdown-content\">\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a onClick={() => setAnimSpeed(7.5)} className=\"dropdown-item\">\r\n                                        Fast\r\n                                    </a>\r\n                                    {/* eslint-disable-next-line */}\r\n                                    <a onClick={() => setAnimSpeed(40)} className=\"dropdown-item\">\r\n                                        Slow\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column has-text-centered buttons is-marginless\">\r\n\r\n                        {\r\n                            premadeUnits.map(n =>\r\n                                <button\r\n                                    key={n.id + Math.random()}\r\n                                    onClick={() => selectUnitAndBeginDrawing(n)}\r\n                                    className={`button is-outlined ${current.context.activeSelection?.id === n.id ? 'is-active' : ''}`}\r\n                                    disabled={current.matches(\"pathfinding\")}>\r\n                                    {n.id}\r\n                                </button>\r\n                            )\r\n\r\n                        }\r\n                    </div>\r\n                    <div className=\"column has-text-centered buttons is-marginless\">\r\n\r\n                        <button\r\n                            onClick={() => randomizeWalls()}\r\n                            className={`button is-outlined`}\r\n                            disabled={current.matches(\"pathfinding\")}\r\n                        >\r\n                            Randomize walls\r\n                            </button>\r\n                        <button\r\n                            onClick={startAlgorithm}\r\n                            className={`button is-primary ${current.matches(\"pathfinding\") && 'is-loading'}`}\r\n                            disabled={current.matches(\"pathfinding\")}\r\n                        >\r\n                            Start\r\n                            </button>\r\n                        <button\r\n                            onClick={reset}\r\n                            className={`button is-info`}\r\n                            disabled={current.matches(\"pathfinding\")}\r\n                        >\r\n                            Reset\r\n                            </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id=\"canvas\"\r\n                ref={canvasContainerRef}\r\n                onMouseMove={mouseMove}\r\n                onMouseDown={mouseDown}\r\n                onMouseUp={mouseUp}\r\n                onTouchMove={mouseMove}\r\n                onTouchStart={mouseDown}\r\n                onTouchEnd={mouseUp}\r\n                onMouseLeave={() => resetUnit(current.context.activeSelection?.id)}></div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Visualizer;\r\n\r\n","import RBush from \"rbush\";\r\n\r\nexport function RTree() {\r\n    const rtree = new RBush();\r\n\r\n    return {\r\n        insert(x1, y1, x2, y2, opts) {\r\n            rtree.insert({\r\n                minX: x1,\r\n                minY: y1,\r\n                maxX: x2,\r\n                maxY: y2,\r\n                ...opts\r\n            });\r\n        },\r\n        searchTree(x, y) {\r\n            const inBounds = rtree.search(\r\n                {\r\n                    minX: x - 5,\r\n                    minY: y - 5,\r\n                    maxX: x + 5,\r\n                    maxY: y + 5\r\n                }\r\n            )\r\n            return inBounds;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Visualizer from './Visualizer/Visualizer';\r\n\r\nReactDOM.render(<Visualizer />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}